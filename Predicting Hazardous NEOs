{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8984243,"sourceType":"datasetVersion","datasetId":5410371}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/esraaelfar/predicting-hazardous-neos?scriptVersionId=195646984\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Import Necessary Libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nfrom imblearn.over_sampling import RandomOverSampler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, f1_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-07T03:31:01.999119Z","iopub.execute_input":"2024-09-07T03:31:01.99954Z","iopub.status.idle":"2024-09-07T03:31:03.406469Z","shell.execute_reply.started":"2024-09-07T03:31:01.999498Z","shell.execute_reply":"2024-09-07T03:31:03.405148Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Load the Data","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/nasa-nearest-earth-objects-1910-2024/nearest-earth-objects(1910-2024).csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:03.408717Z","iopub.execute_input":"2024-09-07T03:31:03.409306Z","iopub.status.idle":"2024-09-07T03:31:04.11153Z","shell.execute_reply.started":"2024-09-07T03:31:03.409257Z","shell.execute_reply":"2024-09-07T03:31:04.110445Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:04.112818Z","iopub.execute_input":"2024-09-07T03:31:04.113232Z","iopub.status.idle":"2024-09-07T03:31:04.137045Z","shell.execute_reply.started":"2024-09-07T03:31:04.113192Z","shell.execute_reply":"2024-09-07T03:31:04.135714Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:04.138597Z","iopub.execute_input":"2024-09-07T03:31:04.139119Z","iopub.status.idle":"2024-09-07T03:31:04.148003Z","shell.execute_reply.started":"2024-09-07T03:31:04.139074Z","shell.execute_reply":"2024-09-07T03:31:04.146776Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:04.152126Z","iopub.execute_input":"2024-09-07T03:31:04.152678Z","iopub.status.idle":"2024-09-07T03:31:04.163339Z","shell.execute_reply.started":"2024-09-07T03:31:04.152615Z","shell.execute_reply":"2024-09-07T03:31:04.161895Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:04.16509Z","iopub.execute_input":"2024-09-07T03:31:04.165645Z","iopub.status.idle":"2024-09-07T03:31:04.300675Z","shell.execute_reply.started":"2024-09-07T03:31:04.16559Z","shell.execute_reply":"2024-09-07T03:31:04.299544Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:04.302002Z","iopub.execute_input":"2024-09-07T03:31:04.302365Z","iopub.status.idle":"2024-09-07T03:31:04.393912Z","shell.execute_reply.started":"2024-09-07T03:31:04.302327Z","shell.execute_reply":"2024-09-07T03:31:04.392619Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Check If Exist Null Value","metadata":{}},{"cell_type":"code","source":"sns.heatmap(df.isnull())","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:04.395286Z","iopub.execute_input":"2024-09-07T03:31:04.395637Z","iopub.status.idle":"2024-09-07T03:31:09.317208Z","shell.execute_reply.started":"2024-09-07T03:31:04.3956Z","shell.execute_reply":"2024-09-07T03:31:09.315897Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:09.318637Z","iopub.execute_input":"2024-09-07T03:31:09.319046Z","iopub.status.idle":"2024-09-07T03:31:09.406197Z","shell.execute_reply.started":"2024-09-07T03:31:09.319005Z","shell.execute_reply":"2024-09-07T03:31:09.404966Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Handling Missing Value","metadata":{}},{"cell_type":"code","source":"df.fillna({\n    'absolute_magnitude'     : df['absolute_magnitude'].mean(),\n    'estimated_diameter_min' : df['estimated_diameter_min'].mean(),\n    'estimated_diameter_max' : df['estimated_diameter_max'].mean()\n        },inplace = True) ","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:09.407454Z","iopub.execute_input":"2024-09-07T03:31:09.407824Z","iopub.status.idle":"2024-09-07T03:31:09.428444Z","shell.execute_reply.started":"2024-09-07T03:31:09.407769Z","shell.execute_reply":"2024-09-07T03:31:09.427142Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:09.429887Z","iopub.execute_input":"2024-09-07T03:31:09.430254Z","iopub.status.idle":"2024-09-07T03:31:09.522338Z","shell.execute_reply.started":"2024-09-07T03:31:09.430215Z","shell.execute_reply":"2024-09-07T03:31:09.520926Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.heatmap(df.isnull(),cmap = 'magma')","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:09.523904Z","iopub.execute_input":"2024-09-07T03:31:09.52432Z","iopub.status.idle":"2024-09-07T03:31:14.442962Z","shell.execute_reply.started":"2024-09-07T03:31:09.524278Z","shell.execute_reply":"2024-09-07T03:31:14.441493Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Check If Exist Duplicated Value","metadata":{}},{"cell_type":"code","source":"df.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:14.444649Z","iopub.execute_input":"2024-09-07T03:31:14.445148Z","iopub.status.idle":"2024-09-07T03:31:14.67421Z","shell.execute_reply.started":"2024-09-07T03:31:14.445094Z","shell.execute_reply":"2024-09-07T03:31:14.673044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.columns","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:14.679693Z","iopub.execute_input":"2024-09-07T03:31:14.680151Z","iopub.status.idle":"2024-09-07T03:31:14.688469Z","shell.execute_reply.started":"2024-09-07T03:31:14.680109Z","shell.execute_reply":"2024-09-07T03:31:14.687213Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['orbiting_body'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:14.690296Z","iopub.execute_input":"2024-09-07T03:31:14.691223Z","iopub.status.idle":"2024-09-07T03:31:14.76041Z","shell.execute_reply.started":"2024-09-07T03:31:14.691138Z","shell.execute_reply":"2024-09-07T03:31:14.759156Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['name'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:14.761659Z","iopub.execute_input":"2024-09-07T03:31:14.762124Z","iopub.status.idle":"2024-09-07T03:31:14.870911Z","shell.execute_reply.started":"2024-09-07T03:31:14.762083Z","shell.execute_reply":"2024-09-07T03:31:14.869719Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Exploratory Data Anlaysis (EDA)","metadata":{}},{"cell_type":"markdown","source":"* ## Hazardous vs. Non-Hazardous Objects","metadata":{}},{"cell_type":"code","source":"hazardous_counts = df['is_hazardous'].value_counts()\n\nlabels = ['Hazardous', 'Non-Hazardous']\n\nplt.pie(hazardous_counts, labels=labels, autopct='%1.1f%%', radius=1)\nplt.title('Proportion of Hazardous vs. Non-Hazardous Objects')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:14.872292Z","iopub.execute_input":"2024-09-07T03:31:14.872651Z","iopub.status.idle":"2024-09-07T03:31:15.037621Z","shell.execute_reply.started":"2024-09-07T03:31:14.872613Z","shell.execute_reply":"2024-09-07T03:31:15.035662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* ## Distribution of Object Sizes","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(13, 6))\n\nplt.subplot(1, 2, 1)\nplt.hist(df['estimated_diameter_min'] , bins=30, edgecolor='black', alpha=0.8)\nplt.title('Distribution of Estimated Minimum Diameter')\nplt.xlabel('Estimated Minimum Diameter (km)')\nplt.ylabel('Frequency')\n\nplt.subplot(1, 2, 2)\nplt.hist(df['estimated_diameter_max'] , bins=30, edgecolor='black', alpha=0.8)\nplt.title('Distribution of Estimated Maximum Diameter')\nplt.xlabel('Estimated Maximum Diameter (km)')\nplt.ylabel('Frequency')\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:15.040347Z","iopub.execute_input":"2024-09-07T03:31:15.041472Z","iopub.status.idle":"2024-09-07T03:31:15.829797Z","shell.execute_reply.started":"2024-09-07T03:31:15.041391Z","shell.execute_reply":"2024-09-07T03:31:15.828573Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* ## Scatter Plot of Relative Velocity vs Hazard Status","metadata":{}},{"cell_type":"code","source":"df['is_hazardous_numeric'] = df['is_hazardous'].replace({'True': 1, 'False': 0})\n\nplt.figure(figsize=(10, 6))\nplt.scatter(df['is_hazardous_numeric'], df['relative_velocity'], alpha=0.5)\n\nplt.title('Scatter Plot of Relative Velocity vs Hazard Status')\nplt.xlabel('Hazard Status (0 = Non-Hazardous, 1 = Hazardous)')\nplt.ylabel('Relative Velocity (km/s)')","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:15.831064Z","iopub.execute_input":"2024-09-07T03:31:15.831418Z","iopub.status.idle":"2024-09-07T03:31:17.88536Z","shell.execute_reply.started":"2024-09-07T03:31:15.83138Z","shell.execute_reply":"2024-09-07T03:31:17.884235Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* ## Miss Distance vs. Object Size","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (10,6))\nplt.scatter(df['estimated_diameter_max'], df['miss_distance'] ,\n            color = 'orange', alpha = .5, label='Max Diameter')\nplt.scatter(df['estimated_diameter_min'], df['miss_distance'] ,\n            color = 'blue', alpha = .4, label='Min Diameter')\nplt.title('Miss Distance vs. Object Size')\nplt.xlabel('Miss Distance')\nplt.ylabel('Object Size')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:17.886778Z","iopub.execute_input":"2024-09-07T03:31:17.887181Z","iopub.status.idle":"2024-09-07T03:31:33.820088Z","shell.execute_reply.started":"2024-09-07T03:31:17.887142Z","shell.execute_reply":"2024-09-07T03:31:33.818867Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.boxplot(x='is_hazardous_numeric', y='absolute_magnitude', data=df)\nplt.title('Distribution of Absolute Magnitude by Hazard Status')\nplt.xlabel('Hazard Status')\nplt.ylabel('Absolute Magnitude')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:33.821451Z","iopub.execute_input":"2024-09-07T03:31:33.821851Z","iopub.status.idle":"2024-09-07T03:31:34.245243Z","shell.execute_reply.started":"2024-09-07T03:31:33.821796Z","shell.execute_reply":"2024-09-07T03:31:34.243928Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Feature Selection","metadata":{}},{"cell_type":"code","source":"df.drop('neo_id', axis=1, inplace=True)\ndf.drop('orbiting_body', axis=1, inplace=True)\ndf.drop('name', axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:34.247361Z","iopub.execute_input":"2024-09-07T03:31:34.247867Z","iopub.status.idle":"2024-09-07T03:31:34.289969Z","shell.execute_reply.started":"2024-09-07T03:31:34.247793Z","shell.execute_reply":"2024-09-07T03:31:34.288573Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Check If Exist Outliers","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(15, 15))\nfor i, feature in enumerate(df.select_dtypes(include='number').columns):\n    plt.subplot(5, 3, i+1)\n    sns.boxplot(data=df, x=feature)\n    plt.title(f'{feature} ')\n    plt.xlabel(' ')\n    plt.ylabel(feature)\nplt.tight_layout()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:34.291404Z","iopub.execute_input":"2024-09-07T03:31:34.291946Z","iopub.status.idle":"2024-09-07T03:31:35.591682Z","shell.execute_reply.started":"2024-09-07T03:31:34.291887Z","shell.execute_reply":"2024-09-07T03:31:35.590511Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Remove Outliers","metadata":{}},{"cell_type":"code","source":"def remove_outliers(feature):\n    global df\n    q1 = df[feature].quantile(0.25)\n    q3 = df[feature].quantile(0.65)\n    iqr = q3 - q1\n\n    upper_limit = q3 + (1.5 * iqr)\n    lower_limit = q1 - (1.5 * iqr)\n\n    df = df.loc[(df[feature] < upper_limit) & (df[feature] > lower_limit)]","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:35.593365Z","iopub.execute_input":"2024-09-07T03:31:35.593874Z","iopub.status.idle":"2024-09-07T03:31:35.601832Z","shell.execute_reply.started":"2024-09-07T03:31:35.593797Z","shell.execute_reply":"2024-09-07T03:31:35.600533Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"features_list = [\"absolute_magnitude\", \"estimated_diameter_min\", \"estimated_diameter_max\", \"relative_velocity\"]\n\nfor feature in features_list:\n    remove_outliers(feature)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:35.603624Z","iopub.execute_input":"2024-09-07T03:31:35.604236Z","iopub.status.idle":"2024-09-07T03:31:35.704875Z","shell.execute_reply.started":"2024-09-07T03:31:35.604178Z","shell.execute_reply":"2024-09-07T03:31:35.703442Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(15, 15))\nfor i, feature in enumerate(df.select_dtypes(include='number').columns):\n    plt.subplot(5, 3, i+1)\n    sns.boxplot(data=df, x=feature)\n    plt.title(f'{feature} ')\n    plt.xlabel(' ')\n    plt.ylabel(feature)\nplt.tight_layout()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:35.706989Z","iopub.execute_input":"2024-09-07T03:31:35.707427Z","iopub.status.idle":"2024-09-07T03:31:36.757176Z","shell.execute_reply.started":"2024-09-07T03:31:35.707386Z","shell.execute_reply":"2024-09-07T03:31:36.75565Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# checking if the data is balanced","metadata":{}},{"cell_type":"code","source":"mypal= ['#FC05FB', '#FEAEFE', '#3FFEBA','#FCD2FC', '#FFF5EE','#FA8072']\n\nplt.figure(figsize=(7, 5),facecolor='#F6F5F4')\ntotal = float(len(df))\nax = sns.countplot(x=df['is_hazardous'], palette=mypal[1::4])\nax.set_facecolor('#F6F5F4')\n\nfor p in ax.patches:\n    \n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()/2.,height +.3,'{:1.1f} %'.format((height/total)*100), ha=\"center\",\n           bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.5))\n\nax.set_title('Target variable distribution', fontsize=20, y=1.05)\nsns.despine(right=True)\nsns.despine(offset=5)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:36.758647Z","iopub.execute_input":"2024-09-07T03:31:36.759066Z","iopub.status.idle":"2024-09-07T03:31:37.027196Z","shell.execute_reply.started":"2024-09-07T03:31:36.759023Z","shell.execute_reply":"2024-09-07T03:31:37.025898Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Data Balancing using RandomOverSampler ","metadata":{}},{"cell_type":"code","source":"X = df.drop(columns=['is_hazardous_numeric','is_hazardous'])\ny= df['is_hazardous']\n\n\nros = RandomOverSampler(random_state=42)\n\nvariablex_ros, y_ros = ros.fit_resample(X, y)\n\nprint('Original dataset shape', Counter(y))\nprint('Resample dataset shape', Counter(y_ros))","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:37.029077Z","iopub.execute_input":"2024-09-07T03:31:37.029593Z","iopub.status.idle":"2024-09-07T03:31:37.250364Z","shell.execute_reply.started":"2024-09-07T03:31:37.029536Z","shell.execute_reply":"2024-09-07T03:31:37.248997Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.concat([variablex_ros, y_ros], axis=1)\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:37.251919Z","iopub.execute_input":"2024-09-07T03:31:37.252372Z","iopub.status.idle":"2024-09-07T03:31:37.278163Z","shell.execute_reply.started":"2024-09-07T03:31:37.252331Z","shell.execute_reply":"2024-09-07T03:31:37.276884Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"mypal= ['#FC05FB', '#FEAEFE', '#3FFEBA','#FCD2FC', '#FFF5EE','#FA8072']\n\nplt.figure(figsize=(7, 5),facecolor='#F6F5F4')\ntotal = float(len(df))\nax = sns.countplot(x=df['is_hazardous'], palette=mypal[1::4])\nax.set_facecolor('#F6F5F4')\n\nfor p in ax.patches:\n    \n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()/2.,height +.3,'{:1.1f} %'.format((height/total)*100), ha=\"center\",\n           bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.5))\n\nax.set_title('Target variable distribution', fontsize=20, y=1.05)\nsns.despine(right=True)\nsns.despine(offset=5)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:37.279567Z","iopub.execute_input":"2024-09-07T03:31:37.280012Z","iopub.status.idle":"2024-09-07T03:31:37.494027Z","shell.execute_reply.started":"2024-09-07T03:31:37.279968Z","shell.execute_reply":"2024-09-07T03:31:37.492673Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Normalization","metadata":{}},{"cell_type":"code","source":"scaler = StandardScaler()\n\nscaled_data = scaler.fit_transform(df)\n\nprint(\"Scaled Data:\", scaled_data)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:37.495756Z","iopub.execute_input":"2024-09-07T03:31:37.496289Z","iopub.status.idle":"2024-09-07T03:31:37.772255Z","shell.execute_reply.started":"2024-09-07T03:31:37.496232Z","shell.execute_reply":"2024-09-07T03:31:37.770973Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Label Encoder Transformation","metadata":{}},{"cell_type":"code","source":"label_encoder = LabelEncoder()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:37.773992Z","iopub.execute_input":"2024-09-07T03:31:37.774524Z","iopub.status.idle":"2024-09-07T03:31:37.780577Z","shell.execute_reply.started":"2024-09-07T03:31:37.774458Z","shell.execute_reply":"2024-09-07T03:31:37.779281Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['is_hazardous'] = label_encoder.fit_transform(df['is_hazardous'])","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:37.782459Z","iopub.execute_input":"2024-09-07T03:31:37.782885Z","iopub.status.idle":"2024-09-07T03:31:37.809782Z","shell.execute_reply.started":"2024-09-07T03:31:37.782837Z","shell.execute_reply":"2024-09-07T03:31:37.808556Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Correlation Heat map","metadata":{}},{"cell_type":"code","source":"corr_matrix = df.corr()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:37.811399Z","iopub.execute_input":"2024-09-07T03:31:37.811938Z","iopub.status.idle":"2024-09-07T03:31:37.87516Z","shell.execute_reply.started":"2024-09-07T03:31:37.811878Z","shell.execute_reply":"2024-09-07T03:31:37.874036Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(figsize=(20, 16))\n\ncax = ax.matshow(corr_matrix, cmap=\"coolwarm\")\n\nfig.colorbar(cax)\n\nticks = np.arange(0, len(corr_matrix.columns), 1)\nax.set_xticks(ticks)\nax.set_yticks(ticks)\nax.set_xticklabels(corr_matrix.columns, rotation=90)\nax.set_yticklabels(corr_matrix.columns)\n\nfor i in range(len(corr_matrix.columns)):\n    for j in range(len(corr_matrix.columns)):\n        plt.text(j, i, f\"{corr_matrix.iloc[i, j]:.2f}\", ha='center', va='center', color='black')\n\nplt.tight_layout()\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:37.87645Z","iopub.execute_input":"2024-09-07T03:31:37.876849Z","iopub.status.idle":"2024-09-07T03:31:38.891347Z","shell.execute_reply.started":"2024-09-07T03:31:37.876779Z","shell.execute_reply":"2024-09-07T03:31:38.890211Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Train-Test-Split The Dataset","metadata":{}},{"cell_type":"code","source":"X = df.drop('is_hazardous',axis=1)\ny = df['is_hazardous']","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:38.892709Z","iopub.execute_input":"2024-09-07T03:31:38.893081Z","iopub.status.idle":"2024-09-07T03:31:38.905877Z","shell.execute_reply.started":"2024-09-07T03:31:38.893043Z","shell.execute_reply":"2024-09-07T03:31:38.904597Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:38.907665Z","iopub.execute_input":"2024-09-07T03:31:38.908084Z","iopub.status.idle":"2024-09-07T03:31:38.960872Z","shell.execute_reply.started":"2024-09-07T03:31:38.908042Z","shell.execute_reply":"2024-09-07T03:31:38.959814Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model Building","metadata":{}},{"cell_type":"code","source":"def model_train_test(model, X_train, y_train, X_test, y_test):\n    \n    model.fit(X_train, y_train)\n    \n    pred_test = model.predict(X_test)\n        \n    test_accuracy = accuracy_score(y_test, pred_test)\n    print(\"Test Accuracy score = {:.2f}%\".format(test_accuracy * 100))  \n    \n    print(\"\\nClassification Report (Test Data):\")\n    print(classification_report(y_test, pred_test))\n    \n    precision = precision_score(y_test, pred_test, average='micro')\n    recall = recall_score(y_test, pred_test, average='micro')\n    f1 = f1_score(y_test, pred_test, average='micro')\n    print(\"Precision (Test): {:.2f}\".format(precision))\n    print(\"Recall (Test): {:.2f}\".format(recall))\n    print(\"F1-score (Test): {:.2f}\".format(f1))","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:38.962277Z","iopub.execute_input":"2024-09-07T03:31:38.962642Z","iopub.status.idle":"2024-09-07T03:31:38.971844Z","shell.execute_reply.started":"2024-09-07T03:31:38.962603Z","shell.execute_reply":"2024-09-07T03:31:38.970504Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Random Forest Classifier","metadata":{}},{"cell_type":"code","source":"X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=15)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:38.973706Z","iopub.execute_input":"2024-09-07T03:31:38.974448Z","iopub.status.idle":"2024-09-07T03:31:38.984164Z","shell.execute_reply.started":"2024-09-07T03:31:38.974388Z","shell.execute_reply":"2024-09-07T03:31:38.983057Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rf_model = RandomForestClassifier(n_estimators=350,max_features=25,random_state=100)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:38.985756Z","iopub.execute_input":"2024-09-07T03:31:38.986267Z","iopub.status.idle":"2024-09-07T03:31:38.993403Z","shell.execute_reply.started":"2024-09-07T03:31:38.986223Z","shell.execute_reply":"2024-09-07T03:31:38.992145Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_train_test(rf_model,X_train, y_train, X_test, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-09-07T03:31:39.002029Z","iopub.execute_input":"2024-09-07T03:31:39.003229Z","iopub.status.idle":"2024-09-07T03:43:46.469625Z","shell.execute_reply.started":"2024-09-07T03:31:39.003177Z","shell.execute_reply":"2024-09-07T03:43:46.468369Z"},"trusted":true},"execution_count":null,"outputs":[]}]}